from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone
from datetime import datetime, timedelta


class ScheduledTask(models.Model):
    """Model to store AI-generated task schedules"""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='scheduled_tasks')
    task = models.ForeignKey('tasks.Task', on_delete=models.CASCADE, related_name='schedules')
    time_block = models.ForeignKey('tasks.TimeBlock', on_delete=models.CASCADE, related_name='scheduled_tasks')
    
    # AI-determined attributes
    estimated_duration_minutes = models.PositiveIntegerField(help_text="AI estimated duration")
    scheduled_date = models.DateField(help_text="Date when task is scheduled")
    start_time = models.TimeField(help_text="Scheduled start time")
    end_time = models.TimeField(help_text="Scheduled end time")
    
    # Pomodoro technique integration
    pomodoro_sessions = models.PositiveIntegerField(default=1, help_text="Number of 25-min sessions")
    break_minutes = models.PositiveIntegerField(default=5, help_text="Break time between sessions")
    
    # AI reasoning
    ai_reasoning = models.TextField(help_text="DeepSeek's reasoning for this schedule")
    priority_score = models.FloatField(help_text="Priority score from AI")
    
    # Status
    is_completed = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['scheduled_date', 'start_time']
        verbose_name = "Scheduled Task"
        verbose_name_plural = "Scheduled Tasks"
    
    def __str__(self):
        return f"{self.task.title} - {self.scheduled_date} {self.start_time}"


class DailySchedule(models.Model):
    """Model to store complete daily schedules generated by AI"""
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='daily_schedules')
    date = models.DateField()
    
    # AI analysis
    total_available_minutes = models.PositiveIntegerField()
    total_scheduled_minutes = models.PositiveIntegerField()
    total_break_minutes = models.PositiveIntegerField()
    
    # Schedule metadata
    tasks_count = models.PositiveIntegerField(default=0)
    moscow_must_count = models.PositiveIntegerField(default=0)
    moscow_should_count = models.PositiveIntegerField(default=0)
    
    # AI generation details
    ai_prompt_used = models.TextField(help_text="The prompt sent to DeepSeek")
    ai_response = models.TextField(help_text="Full AI response")
    generation_timestamp = models.DateTimeField(auto_now_add=True)
    
    # Status
    is_active = models.BooleanField(default=True)
    
    class Meta:
        unique_together = ['user', 'date']
        ordering = ['-date']
        verbose_name = "Daily Schedule"
        verbose_name_plural = "Daily Schedules"
    
    def __str__(self):
        return f"{self.user.username} - {self.date}"
